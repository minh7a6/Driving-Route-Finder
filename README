Names: Rutvik Patel and Kaden Dreger
IDs  : 1530012, 1528632
CMPUT 275 Winter 2019
Assignment 2 Part 2: Driving Route Finder
------------------------------------------------------------------
Included files:
    */server
      * server.cpp
      * digraph.cpp
      * digraph.h
      * dijkstra.cpp
      * dijkstra.h
      * heap.h
      * wdigraph.h
      * serialport.cpp
      * serialport.h
      * Makefile
      * edmonton-roads-2.0.1.txt
    */client
      * client.cpp
      * consts_and_types.h
      * instructions.txt
      * lcd_image.cpp
      * lcd_image.h
      * map_drawing.cpp
      * map_drawing.h
      * circuit-wiring.txt
      * Makefile
    * README

Wiring Instructions:
  The wiring instructions can be found within the circuit-wiring.txt, but will also be iterated here:
      TFT Display:

              The display pins are numbered left to right in this document when they are being viewed
              with their labels showing rightside up. Note you do not require the touchscreen for this assignment,
              so it is probably a lot easier to not wire the Y+/X+/Y-/X- pins.

              Display Pin     Arduino Mega Pin
              1 GND           BB GND bus
              2 Vin           BB Vcc (+ive) bus

              4 CLK           Pin 52
              5 MISO          Pin 50
              6 MOSI          Pin 51
              7 CS            Pin 10
              8 D/C           Pin 9

              19 CCS          Pin 6

          Zoom in and out buttons:

              Button          Arduino Mega Pin
              Zoom In         Pin 2
              Zoom Out        Pin 3

          Joystick connections:

              Joystick Pin    Arduino Mega Pin
              +5v             Vcc
              GND             GND
              VRx             Analog 1
              VRy             Analog 0
              SW              Pin 8

Makefile (server) Targets:
  * make (server)      : builds the project and generates the server executable
  * make serialport.o: compiles serialport.cpp into its respective object (.o) file
  * make digraph.o   : compiles digraph.cpp into its respective object (.o) file
  * make dijkstra.o  : compiles dijkstra.cpp into its respective object (.o) file
  * make server.o    : compiles server.cpp into its respective object (.o) file
  * make clean       : removes the .o and executable files from the directory
  * make help        : prints out information about the targets of the make file

Running Instructions:
    In order to correctly run the program, navigate to the correct directory in terminal with the source files. 
    Client:
      Proceed to the client directory, and use the command 'make upload' to upload the program to the Arduino. 
    Server:
      Then, proceed to the server directory and use the command 'make' to build the project. Then use the command './server' in order to run the server executable, and allow the server to come online.

How to use:
    Once the program is uploaded to the Arduino and the server is brought online,the following user actions are allowed:
        * The user can use the joystick to move the cursor on the screen, and also press the zoom in/out buttons to modify the area on the map displayed on the screen.
        * The user is prompted with the text "FROM?" at the bottom of the screen, indicating that the program is ready for the user to select their first point, click down on the joystick to select a point.
        * The user will then be prompted with the text "TO?" at the bottom of the screen, indicating that the program is ready for the user to select their second point, similarly, click down on the joystick to select the point. 
        * The request will then send to the server side, and a line will be displayed onto the screen, indicating the route to follow to get to your destination!

Notes and Assumptions:
    This program assumes that the user will follow the exact input guidelines as shown above. This program is also designed to only process one request, to process another request you must restart the program. The user must also have the file 'edmonton-roads-2.0.1.txt' in the same directory as the project files. This file must be a CSV file. The user must also strictly follow the running instructions stated above. In this case where the server is running before the program is uploaded to the Arduino, the compiler process will timeout. Also, the user must not access serial-mon at any time as it affects the data trasnfer between the client and server programs.

Modified Code:
  server.cpp:
    * method for reading in files in the 'readGraph' function found from the site: cplusplus.com/doc/tutorial/files/
  heap.h:
    * the functions 'sift_up' and 'sift_down' are modified implementations from the site: https://www.techiedelight.com/min-heap-max-heap-implementation-c/
  map_drawing.cpp:
    * we have changed the colour of the bar at the bottom of the display (line 132 in the status_message) function in order to achieve better readability.
  client.cpp:
    * we have changed the read mode of the zoom in and zoom out buttons as the program was reading it as "always pushed" and it kept zooming in. Precisely the change can be found in the client.cpp file lines 62 and 63 in the function process_input
    * in the setup function, we added a Serial.flush() to flush out any leftover bits.
